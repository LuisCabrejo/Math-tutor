/**
 * MATH PARSER - Sistema de evaluaci√≥n matem√°tica robusto
 * Maneja ra√≠ces, potencias y operaciones complejas con explicaciones paso a paso
 */

class MathParser {
    constructor() {
        this.steps = [];
        this.currentStep = 1;

        // Tablas de referencia para ra√≠ces exactas
        this.cubeRoots = {
            1: 1, 8: 2, 27: 3, 64: 4, 125: 5, 216: 6, 343: 7,
            512: 8, 729: 9, 1000: 10, 1331: 11, 1728: 12,
            2197: 13, 2744: 14, 3375: 15, 4096: 16, 4913: 17,
            5832: 18, 6859: 19, 8000: 20, 9261: 21, 10648: 22,
            12167: 23, 13824: 24, 15625: 25, 17576: 26, 19683: 27,
            21952: 28, 24389: 29, 27000: 30
        };

        this.squareRoots = {
            1: 1, 4: 2, 9: 3, 16: 4, 25: 5, 36: 6, 49: 7,
            64: 8, 81: 9, 100: 10, 121: 11, 144: 12, 169: 13,
            196: 14, 225: 15, 256: 16, 289: 17, 324: 18, 361: 19,
            400: 20, 441: 21, 484: 22, 529: 23, 576: 24, 625: 25,
            676: 26, 729: 27, 784: 28, 841: 29, 900: 30
        };
    }

    /**
     * A√±ade un paso de explicaci√≥n al proceso de resoluci√≥n
     */
    addStep(title, content, calculation) {
        this.steps.push({
            title: `${this.getStepEmoji()} PASO ${this.currentStep}: ${title}`,
            content,
            calculation
        });
        this.currentStep++;
    }

    /**
     * Obtiene emojis variados para cada paso
     */
    getStepEmoji() {
        const emojis = ['üîç', 'üìä', 'üßÆ', '‚ö°', 'üéØ', 'üöÄ', '‚ú®', 'üé™', 'üåü', 'üí´', 'üî•', 'üíé'];
        return emojis[(this.currentStep - 1) % emojis.length];
    }

    /**
     * M√©todo principal para evaluar expresiones personalizadas
     */
    evaluateCustomExpression(expr) {
        this.steps = [];
        this.currentStep = 1;

        try {
            // Validar expresi√≥n de entrada
            if (!this.isValidExpression(expr)) {
                throw new Error("Expresi√≥n contiene caracteres no v√°lidos");
            }

            // Limpiar la expresi√≥n
            let cleanExpr = this.cleanExpression(expr);

            this.addStep(
                "An√°lisis de la expresi√≥n",
                `Identificamos los componentes de la expresi√≥n: <strong>${expr}</strong><br>
                 Vamos a resolver paso a paso siguiendo el orden PEMDAS (Par√©ntesis, Exponentes, Multiplicaci√≥n/Divisi√≥n, Adici√≥n/Sustracci√≥n).`,
                cleanExpr
            );

            // Evaluar en orden PEMDAS
            cleanExpr = this.evaluateParentheses(cleanExpr);
            cleanExpr = this.evaluateCubeRoots(cleanExpr);
            cleanExpr = this.evaluateSquareRoots(cleanExpr);
            cleanExpr = this.evaluatePowers(cleanExpr);
            cleanExpr = this.evaluateMultiplicationDivision(cleanExpr);
            const result = this.evaluateAdditionSubtraction(cleanExpr);

            this.addStep(
                "üèÜ ¬°Resultado Final!",
                `Hemos completado todos los pasos siguiendo la metodolog√≠a PEMDAS.
                 El resultado de <strong>${expr}</strong> es <strong>${result}</strong>`,
                `‚úÖ ${expr} = ${result}`
            );

            return {
                steps: this.steps,
                result: result,
                success: true
            };
        } catch (error) {
            return {
                steps: this.steps,
                result: null,
                success: false,
                error: `‚ùå ${error.message}`
            };
        }
    }

    /**
     * Valida que la expresi√≥n contenga solo caracteres matem√°ticos v√°lidos
     */
    isValidExpression(expr) {
        const validPattern = /^[0-9+\-*/()‚àö‚àõ¬≤¬≥√ó√∑\s\.]+$/;
        return validPattern.test(expr);
    }

    /**
     * Limpia y normaliza la expresi√≥n
     */
    cleanExpression(expr) {
        return expr
            .replace(/\s+/g, '') // Eliminar espacios
            .replace(/√ó/g, '*')   // Normalizar multiplicaci√≥n
            .replace(/√∑/g, '/');  // Normalizar divisi√≥n
    }

    /**
     * Eval√∫a expresiones entre par√©ntesis
     */
    evaluateParentheses(expr) {
        const parenthesesPattern = /\(([^()]+)\)/;
        let match;
        let result = expr;

        while ((match = parenthesesPattern.exec(result)) !== null) {
            const innerExpr = match[1];
            const innerResult = this.evaluateSimpleExpression(innerExpr);

            this.addStep(
                `Resolvemos par√©ntesis: (${innerExpr})`,
                `Evaluamos primero lo que est√° entre par√©ntesis seg√∫n el orden PEMDAS.`,
                `(${innerExpr}) = ${innerResult}`
            );

            result = result.replace(match[0], innerResult.toString());
        }

        return result;
    }

    /**
     * Eval√∫a ra√≠ces c√∫bicas en la expresi√≥n
     */
    evaluateCubeRoots(expr) {
        const cubeRootPattern = /‚àõ(\d+)/g;
        let match;
        let result = expr;

        const matches = [...expr.matchAll(cubeRootPattern)];
        for (match of matches) {
            const number = parseInt(match[1]);
            const cubeRoot = this.findCubeRoot(number);

            if (cubeRoot !== null) {
                this.addStep(
                    `Calculamos ‚àõ${number}`,
                    `Buscamos qu√© n√∫mero elevado al cubo da ${number}.<br>
                     Como ${cubeRoot} √ó ${cubeRoot} √ó ${cubeRoot} = ${cubeRoot ** 3}, entonces <strong>‚àõ${number} = ${cubeRoot}</strong>`,
                    `‚àõ${number} = ${cubeRoot}`
                );
                result = result.replace(`‚àõ${number}`, cubeRoot.toString());
            } else {
                const approxRoot = Math.cbrt(number);
                this.addStep(
                    `Calculamos ‚àõ${number}`,
                    `Esta ra√≠z c√∫bica no es exacta. Calculamos su valor aproximado.<br>
                     <strong>‚àõ${number} ‚âà ${approxRoot.toFixed(3)}</strong>`,
                    `‚àõ${number} ‚âà ${approxRoot.toFixed(3)}`
                );
                result = result.replace(`‚àõ${number}`, approxRoot.toFixed(3));
            }
        }

        return result;
    }

    /**
     * Eval√∫a ra√≠ces cuadradas en la expresi√≥n
     */
    evaluateSquareRoots(expr) {
        const squareRootPattern = /‚àö(\d+)/g;
        let match;
        let result = expr;

        const matches = [...expr.matchAll(squareRootPattern)];
        for (match of matches) {
            const number = parseInt(match[1]);
            const squareRoot = this.findSquareRoot(number);

            if (squareRoot !== null) {
                this.addStep(
                    `Calculamos ‚àö${number}`,
                    `Buscamos qu√© n√∫mero elevado al cuadrado da ${number}.<br>
                     Como ${squareRoot} √ó ${squareRoot} = ${squareRoot ** 2}, entonces <strong>‚àö${number} = ${squareRoot}</strong>`,
                    `‚àö${number} = ${squareRoot}`
                );
                result = result.replace(`‚àö${number}`, squareRoot.toString());
            } else {
                const approxRoot = Math.sqrt(number);
                this.addStep(
                    `Calculamos ‚àö${number}`,
                    `Esta ra√≠z cuadrada no es exacta. Calculamos su valor aproximado.<br>
                     <strong>‚àö${number} ‚âà ${approxRoot.toFixed(3)}</strong>`,
                    `‚àö${number} ‚âà ${approxRoot.toFixed(3)}`
                );
                result = result.replace(`‚àö${number}`, approxRoot.toFixed(3));
            }
        }

        return result;
    }

    /**
     * Eval√∫a potencias en la expresi√≥n
     */
    evaluatePowers(expr) {
        let result = expr;

        // Potencias al cubo
        const cubePattern = /(\d+(?:\.\d+)?)¬≥/g;
        const cubeMatches = [...expr.matchAll(cubePattern)];
        for (let match of cubeMatches) {
            const base = parseFloat(match[1]);
            const cubed = Math.pow(base, 3);

            this.addStep(
                `Calculamos ${base}¬≥`,
                `Elevamos ${base} al cubo: ${base} √ó ${base} √ó ${base}<br>
                 <strong>${base}¬≥ = ${cubed}</strong>`,
                `${base}¬≥ = ${cubed}`
            );
            result = result.replace(`${base}¬≥`, cubed.toString());
        }

        // Potencias al cuadrado
        const squarePattern = /(\d+(?:\.\d+)?)¬≤/g;
        const squareMatches = [...result.matchAll(squarePattern)];
        for (let match of squareMatches) {
            const base = parseFloat(match[1]);
            const squared = Math.pow(base, 2);

            this.addStep(
                `Calculamos ${base}¬≤`,
                `Elevamos ${base} al cuadrado: ${base} √ó ${base}<br>
                 <strong>${base}¬≤ = ${squared}</strong>`,
                `${base}¬≤ = ${squared}`
            );
            result = result.replace(`${base}¬≤`, squared.toString());
        }

        return result;
    }

    /**
     * Eval√∫a multiplicaciones y divisiones
     */
    evaluateMultiplicationDivision(expr) {
        const pattern = /(\d+(?:\.\d+)?)\s*([*/])\s*(\d+(?:\.\d+)?)/;
        let result = expr;
        let hasOperations = true;

        while (hasOperations) {
            const match = pattern.exec(result);
            if (!match) {
                hasOperations = false;
                break;
            }

            const num1 = parseFloat(match[1]);
            const operator = match[2];
            const num2 = parseFloat(match[3]);
            let opResult;
            let opName;

            if (operator === '*') {
                opResult = num1 * num2;
                opName = 'multiplicaci√≥n';
            } else {
                opResult = num1 / num2;
                opName = 'divisi√≥n';
            }

            this.addStep(
                `Realizamos ${opName}: ${num1} ${operator === '*' ? '√ó' : '√∑'} ${num2}`,
                `Seg√∫n PEMDAS, resolvemos multiplicaciones y divisiones de izquierda a derecha.<br>
                 <strong>${num1} ${operator === '*' ? '√ó' : '√∑'} ${num2} = ${opResult}</strong>`,
                `${num1} ${operator === '*' ? '√ó' : '√∑'} ${num2} = ${opResult}`
            );

            result = result.replace(match[0], opResult.toString());
        }

        return result;
    }

    /**
     * Eval√∫a sumas y restas
     */
    evaluateAdditionSubtraction(expr) {
        const pattern = /(\d+(?:\.\d+)?)\s*([+\-])\s*(\d+(?:\.\d+)?)/;
        let result = expr;
        let hasOperations = true;

        while (hasOperations) {
            const match = pattern.exec(result);
            if (!match) {
                hasOperations = false;
                break;
            }

            const num1 = parseFloat(match[1]);
            const operator = match[2];
            const num2 = parseFloat(match[3]);
            let opResult;
            let opName;

            if (operator === '+') {
                opResult = num1 + num2;
                opName = 'suma';
            } else {
                opResult = num1 - num2;
                opName = 'resta';
            }

            this.addStep(
                `Realizamos ${opName}: ${num1} ${operator} ${num2}`,
                `Finalmente, resolvemos sumas y restas de izquierda a derecha.<br>
                 <strong>${num1} ${operator} ${num2} = ${opResult}</strong>`,
                `${num1} ${operator} ${num2} = ${opResult}`
            );

            result = result.replace(match[0], opResult.toString());
        }

        // Verificar si el resultado es un n√∫mero v√°lido
        const finalResult = parseFloat(result);
        if (isNaN(finalResult)) {
            throw new Error("No se pudo obtener un resultado num√©rico v√°lido");
        }

        return finalResult;
    }

    /**
     * Eval√∫a expresiones simples sin pasos detallados
     */
    evaluateSimpleExpression(expr) {
        try {
            // M√©todo seguro para evaluar expresiones matem√°ticas simples
            return new Function('return ' + expr)();
        } catch (error) {
            throw new Error("Expresi√≥n matem√°tica inv√°lida");
        }
    }

    /**
     * Busca ra√≠ces c√∫bicas exactas
     */
    findCubeRoot(number) {
        return this.cubeRoots[number] || null;
    }

    /**
     * Busca ra√≠ces cuadradas exactas
     */
    findSquareRoot(number) {
        return this.squareRoots[number] || null;
    }

    /**
     * M√©todo de utilidad para formatear n√∫meros
     */
    formatNumber(num) {
        if (Number.isInteger(num)) {
            return num.toString();
        }
        return parseFloat(num.toFixed(3)).toString();
    }

    /**
     * Valida si una expresi√≥n tiene par√©ntesis balanceados
     */
    hasBalancedParentheses(expr) {
        let count = 0;
        for (let char of expr) {
            if (char === '(') count++;
            if (char === ')') count--;
            if (count < 0) return false;
        }
        return count === 0;
    }

    /**
     * M√©todo para limpiar y resetear el parser
     */
    reset() {
        this.steps = [];
        this.currentStep = 1;
    }
}
